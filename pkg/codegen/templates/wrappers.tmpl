type ServerInterfaceWrapper struct {
    Handler ServerInterface
}

{{range .}}// Wrapper for {{.OperationId}}
func (w *ServerInterfaceWrapper) {{.OperationId}} (ctx echo.Context) error {
    var err error
{{range .PathParams}}// ------------- Path parameter "{{.ParamName}}" -------------
    var {{.GoName}} {{.TypeDef}}
    err = codegen.BindStringToObject(ctx.Param("{{.ParamName}}"), &{{.GoName}})
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
    }
{{end}}

{{if .RequiresParamObject}}
    // Parameter object where we will unmarshal all parameters from the
    // context.
    var params {{.OperationId}}Params
{{range .QueryParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} query parameter "{{.ParamName}}" -------------
var {{.GoName}} {{.TypeDef}}
{{if .Required}}
    err = codegen.BindStringToObject(ctx.QueryParam("{{.ParamName}}"), &{{.GoName}})
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
    }
    params.{{.GoName}} = {{.GoName}}
{{else}}
    if ctx.QueryParam("{{.ParamName}}") != "" {
        err = codegen.BindStringToObject(ctx.QueryParam("{{.ParamName}}"), &{{.GoName}})
        if err != nil {
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
        }
        params.{{.GoName}} = &{{.GoName}}
    }{{end}}
{{end}}
{{if .HeaderParams}}
    headers := ctx.Request().Header
{{range .HeaderParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} header parameter "{{.ParamName}}" -------------
    var {{.GoName}} {{.TypeDef}}
    {
        valueList, found := headers["{{.ParamName}}"]
{{if .Required}}
        if !found {
            // This should never happen, as Swagger would catch it during
            // validation, but just in case...
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter {{.ParamName}} is required, but not found"))
        }
{{end}}
        n := len(valueList)
        if n != 1 {
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for {{.ParamName}}, got %d", n))
        }
{{if .Required}}
        err = codegen.BindStringToObject(ctx.Param("{{.ParamName}}"), &{{.GoName}})
        if err != nil {
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
        }
        params.{{.GoName}} = {{.GoName}}
{{else}}
        if found {
            err = codegen.BindStringToObject(ctx.Param("{{.ParamName}}"), &{{.GoName}})
            if err != nil {
                return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
            }
            params.{{.GoName}} = &{{.GoName}}
        }
{{end}}

    }
{{end}}
{{end}}
{{end}}
    // Invoke the callback with all the unmarshalled arguments
    err = w.Handler.{{.OperationId}}(ctx{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
    return err
}
{{end}}
