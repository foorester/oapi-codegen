// This is an autogenerated file, any edits which you make here will be lost!
package parameters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Type definition for component schema "ComplexObject"
type ComplexObject struct {
	Id     string `json:"Id"`
	Object Object `json:"Object"`
}

// Type definition for component schema "Object"
type Object struct {
	FirstName string `json:"firstName"`
	Role      string `json:"role"`
}

// Parameters object for GetHeader
type GetHeaderParams struct {
	XPrimitive         *int32         `json:"X-Primitive,omitempty"`
	XPrimitiveExploded *int32         `json:"X-Primitive-Exploded,omitempty"`
	XArrayExploded     *[]int32       `json:"X-Array-Exploded,omitempty"`
	XArray             *[]int32       `json:"X-Array,omitempty"`
	XObjectExploded    *Object        `json:"X-Object-Exploded,omitempty"`
	XObject            *Object        `json:"X-Object,omitempty"`
	XComplexObject     *ComplexObject `json:"X-Complex-Object,omitempty"`
}

// Parameters object for GetQueryForm
type GetQueryFormParams struct {
	Ea *[]int32       `json:"ea,omitempty"`
	A  *[]int32       `json:"a,omitempty"`
	Eo *Object        `json:"eo,omitempty"`
	O  *Object        `json:"o,omitempty"`
	Ep *int32         `json:"ep,omitempty"`
	P  *int32         `json:"p,omitempty"`
	Co *ComplexObject `json:"co,omitempty"`
}

type ServerInterface interface {
	//  (GET /contentObject/{param})
	GetContentObject(ctx echo.Context, param ComplexObject) error
	//  (GET /header)
	GetHeader(ctx echo.Context, params GetHeaderParams) error
	//  (GET /labelExplodeArray/{.param*})
	GetLabelExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /labelExplodeObject/{.param*})
	GetLabelExplodeObject(ctx echo.Context, param Object) error
	//  (GET /labelNoExplodeArray/{.param})
	GetLabelNoExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /labelNoExplodeObject/{.param})
	GetLabelNoExplodeObject(ctx echo.Context, param Object) error
	//  (GET /matrixExplodeArray/{.id*})
	GetMatrixExplodeArray(ctx echo.Context, id []int32) error
	//  (GET /matrixExplodeObject/{.id*})
	GetMatrixExplodeObject(ctx echo.Context, id Object) error
	//  (GET /matrixNoExplodeArray/{.id})
	GetMatrixNoExplodeArray(ctx echo.Context, id []int32) error
	//  (GET /matrixNoExplodeObject/{.id})
	GetMatrixNoExplodeObject(ctx echo.Context, id Object) error
	//  (GET /passThrough/{param})
	GetPassThrough(ctx echo.Context, param string) error
	//  (GET /queryForm)
	GetQueryForm(ctx echo.Context, params GetQueryFormParams) error
	//  (GET /simpleExplodeArray/{param*})
	GetSimpleExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /simpleExplodeObject/{param*})
	GetSimpleExplodeObject(ctx echo.Context, param Object) error
	//  (GET /simpleNoExplodeArray/{param})
	GetSimpleNoExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /simpleNoExplodeObject/{param})
	GetSimpleNoExplodeObject(ctx echo.Context, param Object) error
	//  (GET /simplePrimitive/{param})
	GetSimplePrimitive(ctx echo.Context, param int32) error
}

type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Wrapper for GetContentObject
func (w *ServerInterfaceWrapper) GetContentObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param ComplexObject

	err = json.Unmarshal([]byte(ctx.Param("param")), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'param' as JSON")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContentObject(ctx, Param)
	return err
}

// Wrapper for GetHeader
func (w *ServerInterfaceWrapper) GetHeader(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params GetHeaderParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Primitive" -------------
	if valueList, found := headers["X-Primitive"]; found {
		var XPrimitive int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Primitive, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Primitive", valueList[0], &XPrimitive)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Primitive: %s", err))
		}

		params.XPrimitive = &XPrimitive

	}
	// ------------- Optional header parameter "X-Primitive-Exploded" -------------
	if valueList, found := headers["X-Primitive-Exploded"]; found {
		var XPrimitiveExploded int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Primitive-Exploded, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", true, "X-Primitive-Exploded", valueList[0], &XPrimitiveExploded)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Primitive-Exploded: %s", err))
		}

		params.XPrimitiveExploded = &XPrimitiveExploded

	}
	// ------------- Optional header parameter "X-Array-Exploded" -------------
	if valueList, found := headers["X-Array-Exploded"]; found {
		var XArrayExploded []int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Array-Exploded, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", true, "X-Array-Exploded", valueList[0], &XArrayExploded)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Array-Exploded: %s", err))
		}

		params.XArrayExploded = &XArrayExploded

	}
	// ------------- Optional header parameter "X-Array" -------------
	if valueList, found := headers["X-Array"]; found {
		var XArray []int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Array, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Array", valueList[0], &XArray)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Array: %s", err))
		}

		params.XArray = &XArray

	}
	// ------------- Optional header parameter "X-Object-Exploded" -------------
	if valueList, found := headers["X-Object-Exploded"]; found {
		var XObjectExploded Object
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Object-Exploded, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", true, "X-Object-Exploded", valueList[0], &XObjectExploded)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Object-Exploded: %s", err))
		}

		params.XObjectExploded = &XObjectExploded

	}
	// ------------- Optional header parameter "X-Object" -------------
	if valueList, found := headers["X-Object"]; found {
		var XObject Object
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Object, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Object", valueList[0], &XObject)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Object: %s", err))
		}

		params.XObject = &XObject

	}
	// ------------- Optional header parameter "X-Complex-Object" -------------
	if valueList, found := headers["X-Complex-Object"]; found {
		var XComplexObject ComplexObject
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Complex-Object, got %d", n))
		}

		err = json.Unmarshal([]byte(valueList[0]), &XComplexObject)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'X-Complex-Object' as JSON")
		}

		params.XComplexObject = &XComplexObject

	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHeader(ctx, params)
	return err
}

// Wrapper for GetLabelExplodeArray
func (w *ServerInterfaceWrapper) GetLabelExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("label", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetLabelExplodeObject
func (w *ServerInterfaceWrapper) GetLabelExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("label", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetLabelNoExplodeArray
func (w *ServerInterfaceWrapper) GetLabelNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("label", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelNoExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetLabelNoExplodeObject
func (w *ServerInterfaceWrapper) GetLabelNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("label", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelNoExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetMatrixExplodeArray
func (w *ServerInterfaceWrapper) GetMatrixExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id []int32

	err = runtime.BindStyledParameter("matrix", true, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixExplodeArray(ctx, Id)
	return err
}

// Wrapper for GetMatrixExplodeObject
func (w *ServerInterfaceWrapper) GetMatrixExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id Object

	err = runtime.BindStyledParameter("matrix", true, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixExplodeObject(ctx, Id)
	return err
}

// Wrapper for GetMatrixNoExplodeArray
func (w *ServerInterfaceWrapper) GetMatrixNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id []int32

	err = runtime.BindStyledParameter("matrix", false, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixNoExplodeArray(ctx, Id)
	return err
}

// Wrapper for GetMatrixNoExplodeObject
func (w *ServerInterfaceWrapper) GetMatrixNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id Object

	err = runtime.BindStyledParameter("matrix", false, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixNoExplodeObject(ctx, Id)
	return err
}

// Wrapper for GetPassThrough
func (w *ServerInterfaceWrapper) GetPassThrough(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param string

	Param = ctx.Param("param")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPassThrough(ctx, Param)
	return err
}

// Wrapper for GetQueryForm
func (w *ServerInterfaceWrapper) GetQueryForm(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params GetQueryFormParams
	// ------------- Optional query parameter "ea" -------------

	{
		err = runtime.BindQueryParameter("form", true, false, "ea", ctx.QueryParams(), &params.Ea)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ea: %s", err))
		}
	}

	// ------------- Optional query parameter "a" -------------

	{
		err = runtime.BindQueryParameter("form", false, false, "a", ctx.QueryParams(), &params.A)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
		}
	}

	// ------------- Optional query parameter "eo" -------------

	{
		err = runtime.BindQueryParameter("form", true, false, "eo", ctx.QueryParams(), &params.Eo)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eo: %s", err))
		}
	}

	// ------------- Optional query parameter "o" -------------

	{
		err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
		}
	}

	// ------------- Optional query parameter "ep" -------------

	{
		err = runtime.BindQueryParameter("form", true, false, "ep", ctx.QueryParams(), &params.Ep)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ep: %s", err))
		}
	}

	// ------------- Optional query parameter "p" -------------

	{
		err = runtime.BindQueryParameter("form", false, false, "p", ctx.QueryParams(), &params.P)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter p: %s", err))
		}
	}

	// ------------- Optional query parameter "co" -------------
	if paramValue := ctx.QueryParam("co"); paramValue != "" {
		var Co ComplexObject
		err = json.Unmarshal([]byte(ctx.QueryParam("co")), &Co)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'co' as JSON")
		}
		params.Co = &Co
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetQueryForm(ctx, params)
	return err
}

// Wrapper for GetSimpleExplodeArray
func (w *ServerInterfaceWrapper) GetSimpleExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("simple", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetSimpleExplodeObject
func (w *ServerInterfaceWrapper) GetSimpleExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("simple", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetSimpleNoExplodeArray
func (w *ServerInterfaceWrapper) GetSimpleNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleNoExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetSimpleNoExplodeObject
func (w *ServerInterfaceWrapper) GetSimpleNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleNoExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetSimplePrimitive
func (w *ServerInterfaceWrapper) GetSimplePrimitive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param int32

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimplePrimitive(ctx, Param)
	return err
}

func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}
	router.GET("/contentObject/:param", wrapper.GetContentObject)
	router.GET("/header", wrapper.GetHeader)
	router.GET("/labelExplodeArray/:param", wrapper.GetLabelExplodeArray)
	router.GET("/labelExplodeObject/:param", wrapper.GetLabelExplodeObject)
	router.GET("/labelNoExplodeArray/:param", wrapper.GetLabelNoExplodeArray)
	router.GET("/labelNoExplodeObject/:param", wrapper.GetLabelNoExplodeObject)
	router.GET("/matrixExplodeArray/:id", wrapper.GetMatrixExplodeArray)
	router.GET("/matrixExplodeObject/:id", wrapper.GetMatrixExplodeObject)
	router.GET("/matrixNoExplodeArray/:id", wrapper.GetMatrixNoExplodeArray)
	router.GET("/matrixNoExplodeObject/:id", wrapper.GetMatrixNoExplodeObject)
	router.GET("/passThrough/:param", wrapper.GetPassThrough)
	router.GET("/queryForm", wrapper.GetQueryForm)
	router.GET("/simpleExplodeArray/:param", wrapper.GetSimpleExplodeArray)
	router.GET("/simpleExplodeObject/:param", wrapper.GetSimpleExplodeObject)
	router.GET("/simpleNoExplodeArray/:param", wrapper.GetSimpleNoExplodeArray)
	router.GET("/simpleNoExplodeObject/:param", wrapper.GetSimpleNoExplodeObject)
	router.GET("/simplePrimitive/:param", wrapper.GetSimplePrimitive)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZS2/qOBT+K+jMrEYpoe0uu6qa0VSaPubSxZUqFm5yAFdJ7NqmAqH89ys7ISEPgkMh",
	"pXcHyXl85/PnY45Zg88izmKMlQRvDQIlZ7FE82VMIx7ij+yRfuKzWGGs9EeFS+XykNBYf5P+HCNinq84",
	"ggdSCRrPIEkSBwKUvqBcURaDBzcDaeIONrkG7PUNfQXaNI1jst8ybbV8TF96a+CCcRSKpuDugoZsDhTm",
	"fwqcggd/uEWFbhbefSwyCnxfUIEBeC8bZ0cHn5SClXNPqZDqgUTYCEGwsOlFJZexcrZCTQxXNJ4y7RxS",
	"HzPSY5MI7u+edXRFlQ4PzyjVYIziAwU48IFCpvReDkfDkTZkHGPCKXhwPRwNL8EBTtTc4HezdUzrc9ec",
	"CBIl+s0MTbm6WKLXS7OsH95uO5hQgkSoUEjwXkq6IJyH1DfO7ptkFXW0LUp5wTM2wDOwwdnQYDLDNpdK",
	"LDCZOGXtXo1Gu/Lldm5F4InJ6c6RBCja2Pg3tajRUBY6FzSiin7oZcYlD1mA4E1JKDErbL4Jk5X28+Jp",
	"y6UoMPOp7TEaK5yh0NKyyq2J2p/64u/UPvgshixvMCBCkJU1kBttbQmCKoxkExpn8yTN3YCuBqp9ZW4y",
	"89OAyalimw1mx1W6VyzJsmuIVWh1RO1E5S3iCEhO1VbKFfqpQcH9jsqyQDsrTCamfYTkFcNsRYxq3PXQ",
	"9Im/Wjvsf1W3entp0oRNczxIpA5ItTInjSkIjtRhHZCLKCJiBV68CMMaY5sjqStlu06mY3BmI9e+6Xpg",
	"TRLbT1fZr4Wv7V3+24gsr74ssw607dXZZ3g7M6FFRAm6rOiMBu2b8r7mdMimpMGxBZYW0xtducA68XV4",
	"F9tDWDdl9cVVrYnRwIKrI7Sw7yuvegfrxtkn+tc3kxgnUj7PBVvM5jYT7lNh3jrfdrj3+JLp9X2BYvUP",
	"E1Fbsf/nRntmWKsZzqQsakRypDmpUMtUQ+04w1VQ9QbKbparcsb6n90qEE6CICdj34VElQ9+khuQlvIP",
	"SPiV42kFvc+a5tHjdZX0yrZ8WltMaOOa29lMtWlFpzyASpyVrlo7kHY+c21fhFV/FO4/uscNfucz2fbO",
	"m/2t/rjJ8Sxm275Iy2+97enavqOvEHUQMfpnBFGplq6vwGmQ1mlYMZ1dmn+QUvgLEYIHc6W457rZ30cK",
	"pRoGiDwifEgoJJPkVwAAAP//KsWBZzQcAAA=",
}

// Returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

