openapi: "3.0.1"
info:
  version: 1.0.0
  title: Test Server
  license:
    name: MIT
paths:
  /ensure-everything-is-referenced:
    get:
      operationId: ensureEverythingIsReferenced
      description: |
        This endpoint exists so that components can be created in this
        spec and not be pruned
    # TODO: figure out why uncommenting this causes failures
    #   parameters:
    #     - $ref: "#/components/parameters/ParameterObject"
      requestBody:
        $ref: "#/components/requestBodies/RequestBody"
      responses:
        200:
          description: placeholder
          content:
            application/json:
              schema:
                type: object
                properties:
                  one:
                    $ref: "#/components/schemas/AdditionalPropertiesObject1"
                  two:
                    $ref: "#/components/schemas/AdditionalPropertiesObject2"
                  three:
                    $ref: "#/components/schemas/AdditionalPropertiesObject3"
                  four:
                    $ref: "#/components/schemas/AdditionalPropertiesObject4"
                  five:
                    $ref: "#/components/schemas/AdditionalPropertiesObject5"
                  jsonField:
                    $ref: "#/components/schemas/ObjectWithJsonField"
        default:
          $ref: "#/components/responses/ResponseObject"
  /params_with_add_props:
    get:
      operationId: ParamsWithAddProps
      description: |
        A path with parameters and a body which require additional properties
      parameters:
        - name: p1
          description: |
            This parameter has additional properties
          in: query
          required: true
          style: simple
          schema:
            type: object
            additionalProperties: true
        - name: p2
          description: |
            This parameter has an anonymous inner property which needs to be
            turned into a proper type for additionalProperties to work
          in: query
          required: true
          schema:
            properties:
              inner:
                type: object
                additionalProperties:
                  type: string
            required: [inner]
      responses:
        default:
          description: placeholder
          content:
            text/plain:
              schema:
                type: string
    post:
      operationId: BodyWithAddProps
      description: |
        Has a request body which contains a direct additionalProperties, and
        an anonymous inner property with additionalProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                inner:
                  type: object
                  additionalProperties:
                    type: integer
              required: [name, inner]
              additionalProperties: true
      responses:
        default:
          description: placeholder
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    SchemaObject:
      properties:
        role:
          type: string
        firstName:
          type: string
        readOnlyRequiredProp:
          description: |
            This property is required and readOnly, so the go model should have it as a pointer, 
            as it will not be included when it is sent from client to server.
          type: string
          readOnly: true
        writeOnlyRequiredProp:
          type: integer
          writeOnly: true
      required:
        - role
        - firstName
        - readOnlyRequiredProp
        - writeOnlyRequiredProp
    AdditionalPropertiesObject1:
      description: Has additional properties of type int
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        optional:
          type: string
      required: [name, id]
      additionalProperties:
        type: integer
    AdditionalPropertiesObject2:
      description: Does not allow additional properties
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
      required: [name, id]
      additionalProperties: false
    AdditionalPropertiesObject3:
      description: Allows any additional property
      type: object
      properties:
        name:
          type: string
      required: [name]
      additionalProperties: true
    AdditionalPropertiesObject4:
      description: Has anonymous field which has additional properties
      type: object
      properties:
        name:
          type: string
        inner:
          type: object
          properties:
            name:
              type: string
          required: [name]
          additionalProperties: true
      required: [inner, name]
      additionalProperties: true
    AdditionalPropertiesObject5:
      description: Has additional properties with schema for dictionaries
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SchemaObject'
    ObjectWithJsonField:
      type: object
      properties:
        name:
          type: string
        value1:
          type: string
          format: json
        value2:
          type: string
          format: json
      required: [name, value1]
    Enum1:
      description: |
        Conflicts with Enum2, enum values need to be prefixed with type
        name.
      type: string
      enum: [One, Two, Three]
    Enum2:
      description: |
        Conflicts with Enum1, enum values need to be prefixed with type
        name.
      type: string
      enum: [ Two, Three, Four ]
    Enum3:
      description: |
        Enum values conflict with Enums above, need to be prefixed
        with type name.
      type: string
      enum: [ Enum1One, Foo, Bar ]
    Enum4:
      description: |
        No conflicts here, should have unmodified enums
      type: string
      enum: [ Cat, Dog, Mouse ]
    Enum5:
      description: |
        Numerical enum
      type: integer
      enum: [ 5, 6, 7 ]
    EnumUnion:
      description: |
        Two enums of the same type combined with allOf.
      allOf:
        - $ref: "#/components/schemas/Enum1"
        - $ref: "#/components/schemas/Enum2"
    EnumUnion2:
      description: |
        Two enums of the same type combined with allOf.
      allOf:
      - $ref: "#/components/schemas/Enum1"
      - enum: [ Seven ]
    FunnyValues:
      description: Edge cases for enum names
      type: string
      enum:
        - '*'
        - '5'
        - '&'
        - ''
    RenameMe:
      description: This schema should be renamed via x-go-name when generating
      x-go-name: NewName
      type: object
      properties:
        prop1:
          type: string
        prop2:
          type: string
      required: [prop1, prop2]
    ReferenceToRenameMe:
      description: When a Schema is renamed, $ref should refer to the new name
      type: object
      properties:
        ToNewName:
          $ref: "#/components/schemas/RenameMe"
      required: [ToNewName]
  responses:
    ResponseObject:
      x-go-name: RenamedResponseObject
      description: A simple response object
      content:
        application/json:
          schema:
            properties:
              Field:
                $ref: "#/components/schemas/SchemaObject"
            required: [ Field ]
        text/plain:
          schema:
            type: string
  parameters:
    ParameterObject:
      x-go-name: RenamedParameterObject
      name: ParameterObject
      description: a parameter
      in: query
      content:
        application/json:
          schema:
            properties:
              Field:
                $ref: "#/components/schemas/SchemaObject"
            required: [ Field ]
        text/plain:
          schema:
            type: string
    EnumParam1:
      name: ParamEnum1
      description: a parameter
      in: query
      schema:
        type: string
        enum: [on, off, both]
    EnumParam2:
      name: ParamEnum2
      description: a parameter
      in: query
      schema:
        type: string
        enum: [ on, off, both ]
    EnumParam3:
      name: ParamEnum3
      description: a parameter
      in: query
      schema:
        type: string
        enum: [ alice, eve, bob ]
  requestBodies:
    RequestBody:
      x-go-name: RenamedRequestBody
      content:
        application/json:
          schema:
            properties:
              Field:
                $ref: "#/components/schemas/SchemaObject"
            required: [ Field ]
        text/plain:
          schema:
            type: string
