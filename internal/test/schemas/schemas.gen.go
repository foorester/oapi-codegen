// This is an autogenerated file, any edits which you make here will be lost!
package schemas

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"net/http"
	"strings"
)

// Type definition for component schema "AnyType1"
type AnyType1 interface{}

// Type definition for component schema "AnyType2"
type AnyType2 interface{}

// Type definition for component schema "GenericObject"
type GenericObject map[string]interface{}

type ServerInterface interface {
}

// A client which conforms to the OpenAPI3 specification for this service. The
// server should be fully qualified with shema and server, ie,
// https://deepmap.com.
type Client struct {
	Server string
	Client http.Client
}

type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/zSNsU7EMBBEfyWaOvIl0LmjoqQgHaLwOXOKUWJb3r2TIsv/jpKDbnff25kKn7acIqMK",
	"bIX4hZs7x7e4T3vmCFtb/7+9HGSm+BKyhhRhMS1BOlnSfZ27KzsXuxCV5eY8a0Pr8c7IEvzH9Ydej3/d",
	"M2GRnofWWo8Qb+lEQdeDTRTtPlkeLOjxYJFn2WgGMxyhKTO6HGDxagYzooectsB+VdzLCotFNdvL5U9V",
	"ipqZzJvLxgW07/YbAAD//0jAYSz+AAAA",
}

// Returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

