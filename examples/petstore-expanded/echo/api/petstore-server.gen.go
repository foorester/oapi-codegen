// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------
	if paramValue := ctx.QueryParam("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
